//
// Created by Michael Lewis on 7/27/23.
//

#include <cstddef>

#include <boost/functional/hash.hpp>

#include "Order.hpp"

/**
 * Overloaded ctor
 * @param orderId A unique id that represents this order
 * @param requestType New order single, replace, or cancel. Represents an order type as specified by FIX tag 35
 * @param side A representation of FIX tag 54
 * @param price A representation of FIX tag 44
 * @param qty A representation of FIX tag 38
 */
Order::Order(long orderId, char requestType, int side, double price, double qty)
    : orderId{orderId}, requestType{requestType}, side{side}, price{price}, qty{qty}
{

}

// ******************** Friends ********************

/**
 * Calculates the hash_value of the specified Order using its members
 * @param order An Order whose properties will be used to determine the hash_value
 * @return A std::size_t representing the hash_value of the specified Order
 */
std::size_t hash_value (const Order& order)
{
    std::size_t seed = 0;
    boost::hash_combine(seed, order.orderId);
    boost::hash_combine(seed, order.requestType);
    boost::hash_combine(seed, order.price);
    boost::hash_combine(seed, order.side);
    boost::hash_combine(seed, order.qty);
    return seed;
}

/**
 * Calculates the hash_value of the specified Order using its members
 * @param seed A std::size_t seed that represents the unique hash generated by this function
 * @param order An Order whose properties will be used to determine the hash_value
 * @return A std::size_t representing the hash_value of the specified Order
 */
std::size_t hash_value (std::size_t seed, const Order& order)
{
    boost::hash_combine(seed, order.orderId);
    boost::hash_combine(seed, order.requestType);
    boost::hash_combine(seed, order.price);
    boost::hash_combine(seed, order.side);
    boost::hash_combine(seed, order.qty);
    return seed;
}

// ******************** Member Functions ********************

std::size_t Order::operator()(const Order &order) const
{
    std::size_t seed = 0;
    return hash_value(seed, order);
}

bool Order::operator()(const Order &lhs, const Order &rhs) const
{
    return lhs.orderId == rhs.orderId;
}